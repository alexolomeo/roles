---

- name: "Copy from Prod  {{ gazella_project }} - {{ gazella_environment }} "
  block:

    - name: Print message if ansible version is greater than 2.7.0
      debug:
        msg: "Ansible version is  {{ ansible_version.full }}"

    - name: Get timestamp from the system
      shell: "date +%Y%m%d-%H%M"
      register: tstamp

    - name: Set variables
      set_fact:
       my_date: "{{ tstamp.stdout[0:8]}}"
       my_time: "{{ tstamp.stdout[8:]}}"

    - name: "Base folder to AWX exists: {{ gazella_local_workdir }}"
      become: yes
      ansible.builtin.file:
        path: "{{ gazella_local_base }}"
        state: directory
        owner: "{{ gazella_awx_user }}"
        group: "{{ gazella_awx_group }}"
        mode: 0775
        force: yes

    - name: "Remote directory workdir exists: {{ gazella_local_workdir }}/remote"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.file:
        path: "{{ gazella_local_workdir }}/remote"
        state: directory
        owner: "{{ gazella_awx_user }}"
        group: "{{ gazella_awx_group }}"
        mode: 0775
        force: yes

    - name: "log directory workdir exists: {{ gazella_local_workdir }}/log"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.file:
        path: "{{ gazella_local_workdir }}/log"
        state: directory
        owner: "{{ gazella_awx_user }}"
        group: "{{ gazella_awx_group }}"
        mode: 0775
        force: yes

    - name: "bin directory workdir exists: {{ gazella_local_workdir }}/bin"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.file:
        path: "{{ gazella_local_workdir }}/bin"
        state: directory
        owner: "{{ gazella_awx_user }}"
        group: "{{ gazella_awx_group }}"
        mode: 0775
        force: yes

    - name: Install - Copy the gazella-restore script
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.template:
        src: gazella-restore.j2
        dest: "{{ gazella_local_workdir }}/bin/gazella-restore"
        owner: "{{ gazella_awx_user }}"
        group: "{{ gazella_awx_group }}"
        force: yes
        mode: 0775

    - name: "Closed all applicatioonn PSQL, PG_RESTORE and PG_DUMP"
      become: yes
      ansible.builtin.shell: "killall psql; killall pg_restore ; killall pg_dump "
      ignore_errors: yes

    - name: "Stop service wildfly"
      become: yes
      ansible.builtin.systemd_service:
        state: stopped
        name: wildfly

    - name: "Start get backup from production"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "export PGPASSWORD={{ gazella_db_remote_password }} ; pg_dump -h {{ gazella_db_remote_host }} -p {{ gazella_db_remote_port }} -U {{ gazella_db_remote_username }} {{ gazella_db_remote_exclude }}  -Fc  {{ gazella_db_remote_name }} >  {{ gazella_db_remote_name }}-{{ my_date }}{{ my_time }}.bkp "
      args:
        chdir: "{{ gazella_local_workdir }}/remote"

    - name: "Clean all connection"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "export PGPASSWORD={{ gazella_db_local_password_main }} ; psql -h {{ gazella_db_local_host }} -p {{ gazella_db_local_port }}  -U {{ gazella_db_local_username_main }}  template1 -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname =  '{{ gazella_db_local_name }}' \" "

    - name: "Drop database from integration"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "export PGPASSWORD={{ gazella_db_local_password }} ; psql -h {{ gazella_db_local_host }} -p {{ gazella_db_local_port }}  -U {{ gazella_db_local_username }}  template1 -c \"DROP DATABASE  {{ gazella_db_local_name }} \" "
      ignore_errors: yes

    - name: "Create Database on integration"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "export PGPASSWORD={{ gazella_db_local_password_main }} ; psql -h {{ gazella_db_local_host }} -p {{ gazella_db_local_port }}  -U {{ gazella_db_local_username_main }}  template1 -c \"CREATE DATABASE {{ gazella_db_local_name }} \" "

    - name: "Grant Database on integration"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "export PGPASSWORD={{ gazella_db_local_password_main }} ; psql -h {{ gazella_db_local_host }} -p {{ gazella_db_local_port }}  -U {{ gazella_db_local_username_main }}  template1 -c \"GRANT ALL PRIVILEGES ON DATABASE {{ gazella_db_local_name }} TO {{ gazella_db_local_username }}  \" "

    - name: "Set Owner Database on integration"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "export PGPASSWORD={{ gazella_db_local_password_main }} ; psql -h {{ gazella_db_local_host }} -p {{ gazella_db_local_port }}  -U {{ gazella_db_local_username_main }}  template1 -c \"ALTER DATABASE {{ gazella_db_local_name }} OWNER TO {{ gazella_db_local_username }} \" "

    - name: "Previus settinng  Database on integration"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "export PGPASSWORD={{ gazella_db_local_password_main }} ; psql -h {{ gazella_db_local_host }} -p {{ gazella_db_local_port }}  -U {{ gazella_db_local_username_main }}  template1 -c \"{{ gazella_db_previus_command }} \" "
      ignore_errors: yes

    - name: "Start RESTORING for backup"
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "{{ gazella_local_workdir }}/bin/gazella-restore {{ gazella_db_local_username }} {{ gazella_db_local_password }} {{ gazella_db_local_name }} {{ gazella_db_local_host }} {{ gazella_local_workdir }}/remote/{{ gazella_db_remote_name }}-{{ my_date }}{{ my_time }}.bkp {{ gazella_local_workdir }}/remote/{{ gazella_db_remote_name }}-{{ my_date }}{{ my_time }}.log"
      args:
        chdir: "{{ gazella_local_workdir }}/bin"
      ignore_errors: yes

    - name: "Finish backup "
      become_user: "{{ gazella_awx_user }}"
      ansible.builtin.shell: "echo '{{ my_date }}{{ my_time }} [RESTORING] Creating restoring form backup {{ gazella_local_workdir }}/remote/{{ gazella_db_remote_name }}-{{ my_date }}{{ my_time}}.bkp from the database {{ gazella_db_local_name }}' >> {{ gazella_local_workdir }}/log/copyfromprod.log"

    - name: "Update  Password for Com Aplication "
      block:

        - name: "Update Password"
          ansible.builtin.include_tasks: update_password.yml
          
        - name: "Insert SQL update from {{ gazella_local_workdir }}/update_password/update_password-{{ my_date }}-{{ my_time }}.sql"
          become_user: "{{ gazella_awx_user }}"
          ansible.builtin.shell: "export PGPASSWORD={{ gazella_db_local_password_main }} ; psql -h {{ gazella_db_local_host }} -p {{ gazella_db_local_port }}  -U {{ gazella_db_local_username_main }}  {{ gazella_db_local_name }}  < {{ gazella_local_workdir }}/update_password/update_password-{{ my_date }}-{{ my_time }}.sql "
          ignore_errors: yes

      when: gazella_update_password_enable == 'enable'

    - name: "Start service wildfly"
      become: yes
      ansible.builtin.systemd_service:
        state: started
        name: wildfly

